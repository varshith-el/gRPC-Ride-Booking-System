# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import driver_service_pb2 as driver__service__pb2

GRPC_GENERATED_VERSION = '1.65.1'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.66.0'
SCHEDULED_RELEASE_DATE = 'August 6, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in driver_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class DriverServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterDriver = channel.unary_unary(
                '/driver.DriverService/RegisterDriver',
                request_serializer=driver__service__pb2.DriverRegistrationRequest.SerializeToString,
                response_deserializer=driver__service__pb2.DriverRegistrationResponse.FromString,
                _registered_method=True)
        self.UpdateDriverAvailability = channel.unary_unary(
                '/driver.DriverService/UpdateDriverAvailability',
                request_serializer=driver__service__pb2.DriverAvailabilityRequest.SerializeToString,
                response_deserializer=driver__service__pb2.DriverAvailabilityResponse.FromString,
                _registered_method=True)
        self.GetDriver = channel.unary_unary(
                '/driver.DriverService/GetDriver',
                request_serializer=driver__service__pb2.DriverId.SerializeToString,
                response_deserializer=driver__service__pb2.DriverResponse.FromString,
                _registered_method=True)


class DriverServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateDriverAvailability(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDriver(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_DriverServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterDriver,
                    request_deserializer=driver__service__pb2.DriverRegistrationRequest.FromString,
                    response_serializer=driver__service__pb2.DriverRegistrationResponse.SerializeToString,
            ),
            'UpdateDriverAvailability': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateDriverAvailability,
                    request_deserializer=driver__service__pb2.DriverAvailabilityRequest.FromString,
                    response_serializer=driver__service__pb2.DriverAvailabilityResponse.SerializeToString,
            ),
            'GetDriver': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDriver,
                    request_deserializer=driver__service__pb2.DriverId.FromString,
                    response_serializer=driver__service__pb2.DriverResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'driver.DriverService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('driver.DriverService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class DriverService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/driver.DriverService/RegisterDriver',
            driver__service__pb2.DriverRegistrationRequest.SerializeToString,
            driver__service__pb2.DriverRegistrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateDriverAvailability(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/driver.DriverService/UpdateDriverAvailability',
            driver__service__pb2.DriverAvailabilityRequest.SerializeToString,
            driver__service__pb2.DriverAvailabilityResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetDriver(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/driver.DriverService/GetDriver',
            driver__service__pb2.DriverId.SerializeToString,
            driver__service__pb2.DriverResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
